@page "/"
@using System.Diagnostics

<h1>OpenLayers.Blazor.Map</h1>
<h3>Coordinates in VL95</h3>

<div class="m-2">
    <button class="btn btn-primary" @onclick="CenterLocation">Center to current location</button>
    <button class="btn btn-primary" @onclick="AddMarkLocation">Add Mark at current location</button>
    <input type="range" min="1" max="15" @bind-value="_zoom"><code>@_zoom @_map?.Center</code>
</div>

<div class="container">

    <SwissMap @ref="_map" OnClick="OnMapClick" OnPointerMove="OnPointerMove" @bind-Zoom="_zoom" Style="border:1px solid silver;height:800px;">
        <Popup>
            <div id="popup" class="ol-box">
                @if (context is Marker marker)
                {
                    <h3>@marker.Title</h3>
                    <p>@marker.Coordinate.X / @marker.Coordinate.Y</p>
                }
            </div>
        </Popup>
        <Features>
            <Marker Type="MarkerType.MarkerPin" Coordinate="new Coordinate(1197650, 2604200)"></Marker>
            <Marker Type="MarkerType.MarkerFlag" Coordinate="new Coordinate(1177650, 2624200)" Title="Hallo" BackgroundColor="#449933" Popup></Marker>
            <Line Points="new []{new Coordinate(1197650, 2604200), new Coordinate(1177650, 2624200)}" BorderColor="cyan"></Line>
        </Features>
    </SwissMap>
    
    <p>
        @if (_lastPosition != null)
        {
            <code>@_lastPosition.X / @_lastPosition.Y</code>
        }
    </p>

</div>

@code {
    private SwissMap _map = null!;
    private Coordinate? _lastPosition;
    private double _zoom = 2;

    private async Task OnMapClick(Coordinate coordinate)
    {
        Debug.WriteLine($"you clicked at {coordinate}");
    }

    private void OnPointerMove(Coordinate coordinate)
    {
        _lastPosition = coordinate;
    }

    private async Task CenterLocation()
    {
        await _map.CenterToCurrentGeoLocation();
    }

    private async Task AddMarkLocation()
    {
        var coord = await _map.GetCurrentGeoLocation();
        _map.MarkersList.Add(new Marker { Type = MarkerType.MarkerPin, Coordinate = coord });
    }
}
